// No topo, onde você tem o 'datasource db'
// ... (provider = "postgresql", url = env("DATABASE_URL"))

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// COLE ESSES MODELOS ABAIXO:

// Nosso modelo de Usuário, agora compatível com o NextAuth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? 

  // Relacionamentos que o NextAuth precisa
  accounts Account[]
  sessions Session[]
}

// Modelo do NextAuth para contas (ex: Google, GitHub)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Modelo do NextAuth para Sessões (VAI CORRIGIR NOSSO BUG)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modelo do NextAuth para tokens de verificação (ex: "magic links")
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}